<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="MAIN" Id="{e4c6d6c5-3cb7-443a-8be2-8b81da92a002}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
    (* control flow bool*)
    bInit: BOOL;

    // Y motor (state select).
    fbYStage: FB_MotionStage;

    (* state maintenence *)
    fbStateDefaults: FB_PositionState_Defaults;

    {attribute 'pytmc' := '
        pv: MMS
        astPositionState.array: 1..4
    '}
    fbStates: FB_PositionStatePMPS1D;
    astPositionState: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    fbArrCheckWrite: FB_CheckPositionStateWrite;

    stOut: ST_PositionState;
    // Settings for the POWERMETER state.
    stPower: ST_PositionState;
    // Settings for the YAG1 state.
    stYag1: ST_PositionState;
    // Settings for the YAG2 state.
    stYag2: ST_PositionState;

    // The fast fault output to fault to.
    fbFFHWO: FB_HardwareFFOutput;
    // The arbiter to request beam conditions from.
    fbArbiter: FB_Arbiter(1);

    {attribute 'pytmc' := '
        pv: MMS:STATE:SET
        io: io
    '}
    eEnumSet: E_PPM_States;
    // Set this to TRUE to enable input state moves, or FALSE to disable them.
    bEnableMotion: BOOL;
    // Set this to TRUE to enable beam parameter checks, or FALSE to disable them.
    bEnableBeamParams: BOOL;
    // Set this to TRUE to enable position limit checks, or FALSE to disable them.
    bEnablePositionLimits: BOOL;
    // The name of the device for use in the PMPS DB lookup and diagnostic screens.
    sDeviceName: STRING;
    // The name of the transition state in the PMPS database.
    sTransitionKey: STRING;
    // Set this to TRUE to re-read the loaded database immediately (useful for debug).
    bReadDBNow: BOOL;

    {attribute 'pytmc' := 'pv: NEH:PPM
                           io: i'}
    {attribute 'TcLinkTo' := '.iVoltageINT := TIIB[Term 15 (EL3062)]^AI Standard Channel 1^Value'}
    fbPowerMeter: FB_PPM_PowerMeter;

    {attribute 'TcLinkTo' := 'TIIB[Term 3 (EL3002)]^AI Standard Channel 1^Value'}
	rawValidatorVoltage AT %I*: INT;    
	
    fValidatorVoltage : LREAL;
	
	{attribute 'TcLinkTo' := 'TIIB[Term 3 (EL3002)]^AI Inputs Channel 2^Value'}
	rVVV AT %I* : DINT;
	fVVV : LREAL;

    // IM1K3-PPM: 1 Axis
    {attribute 'TcLinkTo' := '.bLimitForwardEnable  := TIIB[Term 10 (EL7041)]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable := TIIB[Term 10 (EL7041)]^STM Status^Status^Digital input 2;
                              .bBrakeRelease        := TIIB[Term 12 (EL2004)]^Channel 1^Output;
                              .nRawEncoderULINT     := TIIB[Term 11 (EL5042)]^FB Inputs Channel 1^Position'}
    {attribute 'pytmc' := 'pv: NEH:PPM:MMS'}
    M1: ST_MotionStage := (sName := 'NEH:PPM:MMS', nEnableMode := ENUM_StageEnableMode.ALWAYS, bPowerSelf := TRUE, bHardwareEnable := True);
    iVoltageINT: INT;
	
	
	fbGetPMVoltage: FB_AnalogInput;
	fVoltageOther : LREAL;
END_VAR
VAR CONSTANT
    // State defaults if not provided
    fDelta: LREAL := 2;
    fAccel: LREAL := 200;
    fOutDecel: LREAL := 25;
END_VAR
VAR_OUTPUT
    // The current position state as an enum.
    {attribute 'pytmc' := '
        pv: MMS:STATE:GET
        io: i
    '}
    eEnumGet: E_PPM_States;
    // The PMPS database lookup associated with the current position state.
    stDbStateParams: ST_DbStateParams;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInit THEN
    bInit := TRUE;

	// normal op
    //M1.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    
	//M1.nEnableMode := ENUM_StageEnableMode.ALWAYS;
    //M1.bHardwareEnable := TRUE;
	//M1.bPowerSelf := TRUE;
    // Partial backcompat, this used to set fVelocity too but this should be set per install
    (*fbStateDefaults(stPositionState:=stOut, sNameDefault:='OUT', fDeltaDefault:=fDelta, fAccelDefault:=fAccel, fDecelDefault:=fOutDecel);
    fbStateDefaults(stPositionState:=stPower, sNameDefault:='POWERMETER', fDeltaDefault:=fDelta, fAccelDefault:=fAccel, fDecelDefault:=fAccel);
    fbStateDefaults(stPositionState:=stYag1, sNameDefault:='YAG1', fDeltaDefault:=fDelta, fAccelDefault:=fAccel, fDecelDefault:=fAccel);
    fbStateDefaults(stPositionState:=stYag2, sNameDefault:='YAG2', fDeltaDefault:=fDelta, fAccelDefault:=fAccel, fDecelDefault:=fAccel);*)
END_IF

fbYStage(stMotionStage:=M1);
(*
// We need to update from PLC or from EPICS, but not both
fbArrCheckWrite(
    astPositionState:=astPositionState,
    bCheck:=TRUE,
    bSave:=FALSE,
);
IF NOT fbArrCheckWrite.bHadWrite THEN
    astPositionState[E_PPM_States.OUT] := stOut;
    astPositionState[E_PPM_States.POWERMETER] := stPower;
    astPositionState[E_PPM_States.YAG1] := stYag1;
    astPositionState[E_PPM_States.YAG2] := stYag2;
END_IF

fbStates(
    stMotionStage:=M1,
    astPositionState:=astPositionState,
    eEnumSet:=eEnumSet,
    eEnumGet:=eEnumGet,
    fbFFHWO:=fbFFHWO,
    fbArbiter:=fbArbiter,
    bEnableMotion:=bEnableMotion,
    bEnableBeamParams:=bEnableBeamParams,
    bEnablePositionLimits:=bEnablePositionLimits,
    sDeviceName:=sDeviceName,
    sTransitionKey:=sTransitionKey,
    bReadDBNow:=bReadDBNow,
    stDbStateParams=>stDbStateParams,
);

fbArrCheckWrite(
    astPositionState:=astPositionState,
    bCheck:=FALSE,
    bSave:=TRUE,
);

stOut := astPositionState[E_PPM_States.OUT];
stPower := astPositionState[E_PPM_States.POWERMETER];
stYag1 := astPositionState[E_PPM_States.YAG1];
stYag2 := astPositionState[E_PPM_States.YAG2];
*)
fbPowerMeter();


fValidatorVoltage := rawValidatorVoltage / EXPT(2, 12) * 10;

(*
rVVV := rVVV AND 16#7FFFFF;
fVVV := rVVV / EXPT(2,23) * 5;
*)

fbGetPMVoltage(
    iRaw := rawValidatorVoltage,
    iTermBits := 15,
    fTermMax := 10000,
    fTermMin := 0,
    fReal => fVoltageOther);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>